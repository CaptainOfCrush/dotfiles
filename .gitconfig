[user]
    name = Nathan Dumar
    email = njdumar@gmail.com
[diff]
    tool=vimdiff
[difftool "meld"]
    path = meld
[merge]
    tool=vimdiff
    conflictstyle = diff3
[mergetool "mymeld"]
    cmd = meld --diff $BASE $LOCAL --diff $BASE $REMOTE --diff $LOCAL $BASE $REMOTE $MERGED
[alias]
    pullall = !git pull && git submodule update --recursive --init
    mergenff = merge --no-ff
    unstage = reset HEAD
    uncommit = reset --soft HEAD^
    svndiff = diff --no-prefix
    svn-fetch-all = svn fetch --fetch-all

    # Create an svn compatible patch, complete with svn revision info
    svn-diff = !~/dotfiles/git-svn-diff.sh

    # Find where this branch meets master
    oldest-ancestor = !zsh -c 'diff --old-line-format= --new-line-format= <(git rev-list --first-parent \"${1:-master}\") \
                      <(git rev-list --first-parent \"${2:-HEAD}\") | head -1' -

    # Find where this branch branched of from any given branch. 'git first-ancestor-with <branch-name>
    first-ancestor-with = !zsh -c 'diff --old-line-format= --new-line-format= <(git rev-list --first-parent \"${1:-$1}\") \
                      <(git rev-list --first-parent \"${2:-HEAD}\") | head -1' -

[core]
    fileMode = false

    # Create svn compatible patch: git diff --no-prefix > ~/someFeature.diff
    # or use the git-svn-diff.sh script to add in the svn revision numbers to the patch.
    # eg. 'git svn-diff <svn base> <local branch tip> > someFeature.patch'
    #
    # To apply to svn: patch -p0 < ~/someFeature.diff
    #
    # NOTE: If your files has mixed/unix line endings but the wirking copy is dos, convert the entire patch file
    # to dos format (unix2dos filename) and apply the patch. Treat it like a binary
    # so that is doesn't strip the CRs: patch -p0 --binary < ~/someFeature.patch. Also, linux hates patching dos
    # files, better to have a checkout with unix line endings and convert the patch to have them as well. It workd better.
    #
    # rebase onto can move a branch backwards: rebase --oonto <destinationBranch/commit> <branchToMove'sBase> <branchToMove(HEAD)>
    #
    # To ignore files already checked into the repo:
    #   - git update-index --assume-unchanged file/to/ignore.txt
    # And to undo it:
    #   - git update-index --no-assume-unchanged file/to/ignore.txt
[push]
	default = matching
